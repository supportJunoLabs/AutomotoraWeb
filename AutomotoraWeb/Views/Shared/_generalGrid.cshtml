@model Object
@using System.Web.UI.WebControls
@using AutomotoraWeb.Helpers;
@using AutomotoraWeb.Models;

@{

    InfoGrilla ig = new InfoGrilla();
    
     //List<string> hiddenColumns=null;
    //Dictionary<string, int> trunkColumns=null;
    //List<string> visibleColumns=null;
    //Type type;
    //string nombre;
    //string campoClave;
    //List<BotonGrilla> botones=null;
    //string 

    if (ViewBag.InfoGrilla != null) {
        ig = ViewBag.InfoGrilla;
    } else {

        if (ViewBag.hiddenColumns != null) {
            ig.HiddenColumns = (List<string>)(ViewBag.hiddenColumns);
        }

        if (ViewBag.visibleColumns != null) {
            ig.VisibleColumns = (List<string>)(ViewBag.visibleColumns);
            if (ig.VisibleColumns.Count == 0) {
                ig.VisibleColumns = null;
            }
        } else {
            ig.VisibleColumns = null;
        }

        if (ViewBag.trunkColumns != null) {
            ig.TrunkColumns = (Dictionary<string, int>)(ViewBag.trunkColumns);
        }
        if (ViewBag.Botones!=null){
            ig.Botones = ViewBag.Botones;
        }else{
            ig.Botones = null;
        }

         ig.TypeOfModel = (Type)(ViewBag.typeOfModel);
         ig.Controller = ViewBag.controller;
         ig.NameGrid = ViewBag.nameGrid;
         ig.ActionCallbackRoute = ViewBag.actionCallbackRoute;
         ig.KeyFieldName = ViewBag.KeyFieldName;

    }

    List<GridViewColumn> listGridViewsColumn = new List<GridViewColumn>();
    System.Reflection.PropertyInfo[] propertiesinfo = ig.TypeOfModel.GetProperties();
    List<MVCxGridViewColumn> lista = new List<MVCxGridViewColumn>();

    foreach (System.Reflection.PropertyInfo propertyInfo in propertiesinfo) {
        object[] arrayDisplayAttribute = propertyInfo.GetCustomAttributes(typeof(System.ComponentModel.DataAnnotations.DisplayAttribute), true);
        foreach (System.ComponentModel.DataAnnotations.DisplayAttribute displayAttribute in arrayDisplayAttribute) {

            if ((ig.VisibleColumns != null && ig.VisibleColumns.Contains(propertyInfo.Name)) ||
                  (ig.VisibleColumns == null)  //si vinieron especificadas las columnas, solo se incluyen si estan en la lista  no son hidden
               ) {                          //si no vienieron, las pongo todas salvo las que estan como hidden

                if (ig.HiddenColumns==null|| !ig.HiddenColumns.Contains(propertyInfo.Name)) {
                    MVCxGridViewColumn gridViewColumn = new MVCxGridViewColumn();
                    gridViewColumn.FieldName = propertyInfo.Name;
                    gridViewColumn.Caption = displayAttribute.Name;
                    gridViewColumn.ColumnType = MVCxGridViewColumnType.Default;

                    if (propertyInfo.PropertyType.Name.Equals("Boolean")) {
                        gridViewColumn.ColumnType = MVCxGridViewColumnType.CheckBox;
                        gridViewColumn.Width = Unit.Pixel(75);
                    } else if (propertyInfo.PropertyType.Name.Equals("DateTime")) {
                        gridViewColumn.PropertiesEdit.DisplayFormatString = "dd/MM/yyyy";
                        gridViewColumn.Width = Unit.Pixel(100);
                    }

                    //listGridViewsColumn.Add(gridViewColumn);
                    lista.Add(gridViewColumn);  //lo guardo en una lista temporal para ordenarlo antes de agregarlo
                }
            }
        }
    }

    //Si vinieron especificadas las columnas, las ordeno segun el orden recibido.
    if (ig.VisibleColumns != null) {
        List<MVCxGridViewColumn> lista_ordenada = new List<MVCxGridViewColumn>();
        foreach (string s in ig.VisibleColumns) {
            foreach (var x in lista) {
                if (x.FieldName == s) {
                    lista_ordenada.Add(x);
                    break;
                }
            }
        }
        foreach (var x in lista_ordenada) {
            listGridViewsColumn.Add(x);
        }
    } else {
        foreach (var x in lista) {
            listGridViewsColumn.Add(x);
        }
    }
            
}


@(Html.DevExpress().GridView(
    settings => {
        settings.Name = ig.NameGrid;
        settings.CallbackRouteValues = new { Controller = ig.Controller, Action = ig.ActionCallbackRoute, id = ViewData["id"]};
        settings.Width = Unit.Percentage(98);

        settings.SettingsBehavior.AllowSort = true;
        settings.SettingsBehavior.AllowGroup = true;
        settings.Settings.ShowGroupPanel = true;
        settings.KeyFieldName = ig.KeyFieldName;

        //Adds

        settings.SettingsPager.AlwaysShowPager = true;
        settings.SettingsPager.Mode = GridViewPagerMode.ShowPager;
        settings.SettingsPager.FirstPageButton.Visible = true;
        settings.SettingsPager.LastPageButton.Visible = true;
        settings.SettingsPager.PageSize = 30;
        settings.SettingsPager.PageSizeItemSettings.Visible = true;
        settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "30", "50", "100" };

        //Adds       

        //Filtros
        settings.Settings.ShowHeaderFilterButton = true;
        settings.Settings.ShowFilterRow = true;

        settings.Settings.ShowFilterBar = GridViewStatusBarMode.Visible;
        settings.SettingsText.FilterBarClear = "QuitarFiltros";
        settings.Settings.ShowFilterRowMenu = true;
        settings.CommandColumn.ClearFilterButton.Visible = true;
        settings.Settings.ShowHeaderFilterBlankItems = false;

        settings.SettingsPopup.HeaderFilter.MinWidth = 300;
        settings.SettingsPopup.HeaderFilter.MinHeight = 200;


        //Columnas Visibles (Propiedades)
        settings.Columns.AddRange(listGridViewsColumn.ToArray());


        //Columnas Visibles (Editores)
        if (ig.Botones == null || ig.Botones.Count > 0) {
            settings.Columns.Add(column => {
                column.Caption = "Acciones";
                column.CellStyle.HorizontalAlign = HorizontalAlign.Center;
                column.Width = Unit.Pixel(90);
                column.SetDataItemTemplateContent(c => {
                    var id = DataBinder.Eval(c.DataItem, (String)(ig.KeyFieldName));
                    if (ig.Botones == null) {
                        ViewContext.Writer.WriteLine(@Html.BotonImagen("details", ig.Controller, new { id = id }, "boton-consultar-mf", "Consultar").ToHtmlString());
                        ViewContext.Writer.WriteLine(@Html.BotonImagen("edit", ig.Controller, new { id = id }, "boton-editar-mf", "Editar").ToHtmlString());
                        ViewContext.Writer.WriteLine(@Html.BotonImagen("delete", ig.Controller, new { id = id }, "boton-eliminar-mf", "Eliminar").ToHtmlString());
                    } else {
                        foreach (BotonGrilla b in ig.Botones) {
                            ViewContext.Writer.WriteLine(@Html.BotonImagen(b.Accion, b.Controlador, new { id = id }, b.Clase, b.Tooltip).ToHtmlString());
                        }
                    }

                });
            });
        }

        //Se trunca contenido de columnas con mucho texto
        settings.HtmlDataCellPrepared = (sender, e) => {
            if (ig.TrunkColumns != null && ig.TrunkColumns.Keys.Contains(e.DataColumn.FieldName)) {
                if (e.CellValue != null && e.CellValue.ToString().Length > ig.TrunkColumns[e.DataColumn.FieldName]) {
                    e.Cell.ToolTip = e.CellValue.ToString();
                    e.Cell.Text = e.CellValue.ToString().Substring(0, ig.TrunkColumns[e.DataColumn.FieldName]) + "...";
                }
            }
        };
    }
).Bind(Model).GetHtml())

