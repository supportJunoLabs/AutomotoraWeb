@model Object
@using System.Web.UI.WebControls
@using AutomotoraWeb.Helpers;
@using AutomotoraWeb.Models;
@using AutomotoraWeb.Controllers.General;
@using AutomotoraWeb.Utils;
@using System.ComponentModel.DataAnnotations;
@using System.Reflection;

@{

    InfoGrilla ig = new InfoGrilla();
    int sumaAnchos = 0;

    if (ViewBag.InfoGrilla != null) {
        ig = ViewBag.InfoGrilla;
    } else {
        throw new Exception("No se ha especificado el objeto InfoGrilla para la grilla solicitada");
    }

    if (ig.TrunkColumns == null) {
        ig.TrunkColumns = new Dictionary<string, int>();
    }

    if (ig.DobleClick) {
        if (string.IsNullOrWhiteSpace(ig.ControladorDobleClick)) {
            ig.ControladorDobleClick = ig.Controller;
        }
        if (string.IsNullOrWhiteSpace(ig.AccionDobleClick)) {
            ig.AccionDobleClick = BaseController.DETAILS;
        }
    }
    bool defineAnchos = false;

    List<MVCxGridViewColumn> listGridViewsColumn = new List<MVCxGridViewColumn>();

    //------------- COLUMNAS POR REFLECTION ------------------------------------

    //Si no vienen definidas las columnas, logica para mostrarlas por reflection
    if (ig.VisibleColumns == null) {
        //obtengo los campos por refletion
        PropertyInfo[] propertiesinfo = ig.TypeOfModel.GetProperties();
        foreach (PropertyInfo propertyInfo in propertiesinfo) {
            object[] arrayDisplayAttribute = propertyInfo.GetCustomAttributes(typeof(DisplayAttribute), true);
            if (arrayDisplayAttribute!=null && arrayDisplayAttribute.Length>0){
                DisplayAttribute displayAttribute = (DisplayAttribute) arrayDisplayAttribute[0];
                
                if (ig.HiddenColumns == null || !ig.HiddenColumns.Contains(propertyInfo.Name)) {

                    MVCxGridViewColumn gridViewColumn = new MVCxGridViewColumn();
                    gridViewColumn.FieldName = propertyInfo.Name;
                    gridViewColumn.Caption = displayAttribute.Name;
                    gridViewColumn.ColumnType = MVCxGridViewColumnType.Default;
                    if (GeneralUtils.isBoolean(propertyInfo)) {
                        gridViewColumn.Width = Unit.Pixel(75);
                    } else if (GeneralUtils.isDateTime(propertyInfo)) {
                        gridViewColumn.Width = Unit.Pixel(100);
                    }
                    if (GeneralUtils.isBoolean(propertyInfo)) {
                        gridViewColumn.ColumnType = MVCxGridViewColumnType.CheckBox;

                    }
                    if (GeneralUtils.isDateTime(propertyInfo)) {
                        gridViewColumn.PropertiesEdit.DisplayFormatString = "dd/MM/yyyy";
                    }
                    if (GeneralUtils.isDateTime(propertyInfo)) {
                        gridViewColumn.CellStyle.HorizontalAlign = HorizontalAlign.Center;
                    }
                    if (GeneralUtils.isImporte(propertyInfo) || GeneralUtils.isInteger(propertyInfo)) {
                        gridViewColumn.CellStyle.HorizontalAlign = HorizontalAlign.Right;
                    }
                    listGridViewsColumn.Add(gridViewColumn);
                }
            }
        }
    }

    //------------- COLUMNAS ESPECIFICADAS MANUALMENTE ------------------------------------

    if (ig.VisibleColumns!=null) { //Opcion en la que vienen definidas manualmente las columnas:
        defineAnchos = ig.anchosDefinidos();
        System.Reflection.PropertyInfo[] propertiesinfo = ig.TypeOfModel.GetProperties();
        foreach (ColumnaGrilla cg in ig.VisibleColumns) {
                
            //Ver que no haya venido como oculta
            if (ig.HiddenColumns!=null && ig.HiddenColumns.Contains(cg.Campo)){
                    continue; //seguir con la proxima porque esta no va
            }
                
            //Buscar la propiedad asociada para obtener sus datos:
            System.Reflection.PropertyInfo propertyInfo = null;
            foreach (var x in propertiesinfo) {
                if (x.Name == cg.Campo) {
                    propertyInfo = x;
                    break; //salir del foreach
                }
            }
            if (propertyInfo == null) {
                continue; //seguir con el proximo porque no existe esta columna
            }
                
            //Acceder al data annotation de la columna
            object[] arrayDisplayAttribute = propertyInfo.GetCustomAttributes(typeof(DisplayAttribute), true);
            DisplayAttribute displayAttribute = null;
            if (arrayDisplayAttribute != null && arrayDisplayAttribute.Length > 0) {
                displayAttribute = (DisplayAttribute)arrayDisplayAttribute[0];
            } 
                
            MVCxGridViewColumn gridViewColumn = new MVCxGridViewColumn();
            gridViewColumn.FieldName = propertyInfo.Name;      
                
            //Titulo de la columna
            if (!string.IsNullOrWhiteSpace(cg.Titulo)){
                gridViewColumn.Caption = cg.Titulo;
            }else{
                if (displayAttribute!=null && !string.IsNullOrWhiteSpace(displayAttribute.Name)){
                    gridViewColumn.Caption =  displayAttribute.Name;
                }else{
                    gridViewColumn.Caption=cg.Campo;
                }
            }
                
            if (GeneralUtils.isBoolean(propertyInfo)) {
                gridViewColumn.ColumnType = MVCxGridViewColumnType.CheckBox;

            }else{
                gridViewColumn.ColumnType = MVCxGridViewColumnType.Default;
            }

                
            //Ancho
            if (defineAnchos ) {
                if (cg.Ancho > 0) {
                    gridViewColumn.Width = Unit.Pixel(cg.Ancho);
                    sumaAnchos += cg.Ancho;
                } else {
                    gridViewColumn.Width = Unit.Pixel(100);
                    sumaAnchos += 100;
                }
            } else {
                if (GeneralUtils.isBoolean(propertyInfo)) {
                    gridViewColumn.Width = Unit.Pixel(75);
                } else if (GeneralUtils.isDateTime(propertyInfo)) {
                    gridViewColumn.Width = Unit.Pixel(100);
                }
            }
                
            //Alineacion
            if (cg.Alineacion != ColumnaGrilla.ALINEACIONES.DEFAULT) {
                switch (cg.Alineacion) {
                    case ColumnaGrilla.ALINEACIONES.IZQUIERDA:
                        gridViewColumn.CellStyle.HorizontalAlign = HorizontalAlign.Left;
                        break;
                    case ColumnaGrilla.ALINEACIONES.DERECHA:
                        gridViewColumn.CellStyle.HorizontalAlign = HorizontalAlign.Right;
                        break;
                    case ColumnaGrilla.ALINEACIONES.CENTRO:
                        gridViewColumn.CellStyle.HorizontalAlign = HorizontalAlign.Center;
                        break;
                    case ColumnaGrilla.ALINEACIONES.JUSTIFICADO:
                        gridViewColumn.CellStyle.HorizontalAlign = HorizontalAlign.Justify;
                        break;
                }
            } else { //Si no se especifica, usar la alineacion por defecto.
                if (GeneralUtils.isDateTime(propertyInfo)) {
                    gridViewColumn.CellStyle.HorizontalAlign = HorizontalAlign.Center;
                }
                if (GeneralUtils.isImporte(propertyInfo) || GeneralUtils.isInteger(propertyInfo)) {
                    gridViewColumn.CellStyle.HorizontalAlign = HorizontalAlign.Right;
                }
            }
                
            //ver como sera truncada si es necesario (minimo entre el valor que trae y trunkColumns)
            int max = cg.LargoMax;
            if (ig.TrunkColumns.Keys.Contains(cg.Campo)) {
                if (ig.TrunkColumns[cg.Campo] < cg.LargoMax && ig.TrunkColumns[cg.Campo]>0) {
                    max = ig.TrunkColumns[cg.Campo];
                }
            }
                
            if (!GeneralUtils.isBoolean(propertyInfo)) { //si es boolean va por checkbox
                if (cg.Hipervinculo) {
                    gridViewColumn.SetDataItemTemplateContent(container => {
                        Html.DevExpress().HyperLink(hyperlink => {
                            //var visibleIndex = container.VisibleIndex;
                            //var keyValue = container.KeyValue;
                            var texto = DataBinder.Eval(container.DataItem, cg.Campo);
                            string tooltip = null;
                            if (GeneralUtils.isDateTime(propertyInfo)) {
                                if (texto != null) {
                                    texto = ((DateTime)DataBinder.Eval(container.DataItem, cg.Campo)).ToString("dd/MM/yyyy");
                                }
                            } else {
                                if (texto != null && max > 0 && texto.ToString().Length > max) {
                                    tooltip = texto.ToString();
                                    texto = texto.ToString().Substring(0, max) + "...";
                                }
                            }
                            var pardestino = DataBinder.Eval(container.DataItem, cg.HCampoParametro);

                            //hyperlink.Name = "hl" + keyValue.ToString();
                            if (texto != null) {
                                hyperlink.Properties.Text = texto.ToString();
                            }
                            hyperlink.NavigateUrl = Url.Action(cg.Haccion, cg.Hcontrolador, new { id = pardestino });
                            if (!string.IsNullOrWhiteSpace(tooltip)) {
                                hyperlink.ToolTip = tooltip;
                            }
                        }).Render();
                    });
                } else {
                    gridViewColumn.SetDataItemTemplateContent(container => {
                        Html.DevExpress().Label(label => {

                            string tooltip = null;
                            var texto = DataBinder.Eval(container.DataItem, cg.Campo);
                            if (GeneralUtils.isDateTime(propertyInfo)) {
                                if (texto != null) {
                                    texto = ((DateTime)DataBinder.Eval(container.DataItem, cg.Campo)).ToString("dd/MM/yyyy");
                                }
                            } else {

                                if (texto != null && max > 0 && texto.ToString().Length > max) {
                                    tooltip = texto.ToString();
                                    texto = texto.ToString().Substring(0, max) + "...";
                                }
                            }
                            if (texto != null) {
                                label.Text = texto.ToString();
                            }
                            if (!string.IsNullOrWhiteSpace(tooltip)) {
                                label.ToolTip = tooltip;
                            }
                        }).Render();
                    });
                }
            } //if not boolean
            listGridViewsColumn.Add(gridViewColumn);
        } //foreach
    }//if columnasvisibles
    
}


@(Html.DevExpress().GridView(
    settings => {
        settings.Name = ig.NameGrid;
        settings.CallbackRouteValues = new { Controller = ig.Controller, Action = ig.ActionCallbackRoute, idParametros = ViewData["idParametros"] };
        if (!defineAnchos) {
            settings.Width = Unit.Percentage(98);
        } else {
            settings.Width = Unit.Pixel(sumaAnchos + 90);
        }
        settings.SettingsBehavior.AllowSort = true;
        settings.SettingsBehavior.AllowGroup = true;
        settings.Settings.ShowGroupPanel = true;
        settings.KeyFieldName = ig.KeyFieldName;

        //Adds

        settings.SettingsPager.AlwaysShowPager = true;
        settings.SettingsPager.Mode = GridViewPagerMode.ShowPager;
        settings.SettingsPager.FirstPageButton.Visible = true;
        settings.SettingsPager.LastPageButton.Visible = true;
        if (ig.registrosPorPagina <= 0) {
            settings.SettingsPager.PageSize = 30;
        } else {
            settings.SettingsPager.PageSize = ig.registrosPorPagina;
        }
        settings.SettingsPager.PageSizeItemSettings.Visible = true;
        //settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "30", "50", "100" };

        //Adds       

        //Filtros
        settings.Settings.ShowHeaderFilterButton = true;
        settings.Settings.ShowFilterRow = true;

        settings.Settings.ShowFilterBar = GridViewStatusBarMode.Visible;
        settings.SettingsText.FilterBarClear = "QuitarFiltros";
        settings.Settings.ShowFilterRowMenu = true;
        settings.CommandColumn.ClearFilterButton.Visible = true;
        settings.Settings.ShowHeaderFilterBlankItems = false;

        settings.SettingsPopup.HeaderFilter.MinWidth = 300;
        settings.SettingsPopup.HeaderFilter.MinHeight = 200;

        if (ig.DobleClick) {
            settings.ClientSideEvents.RowDblClick = "function(s, e){ window.open('" + @Url.Action(ig.AccionDobleClick, ig.ControladorDobleClick) + "/' + s.GetRowKey(e.visibleIndex), '_self'); }";
        }

        if (!ig.AccionesAlComienzo) {
            foreach (var c in listGridViewsColumn) {
                settings.Columns.Add(c);
            }
        }

        //Columnas Visibles (Editores)
        if (ig.Botones == null || ig.Botones.Count > 0) {
            settings.Columns.Add(column => {
                column.Caption = "Acciones";
                column.CellStyle.HorizontalAlign = HorizontalAlign.Center;

                if (ig.Botones == null) {
                    column.Width = Unit.Pixel(90);
                } else {
                    column.Width = Unit.Pixel(30 + ig.Botones.Count);
                }

                column.SetDataItemTemplateContent(c => {
                    var id = DataBinder.Eval(c.DataItem, (String)(ig.KeyFieldName));
                    if (ig.Botones == null) {
                        ViewContext.Writer.WriteLine(@Html.BotonImagen("details", ig.Controller, new { id = id }, "boton-consultar-mf", "Consultar").ToHtmlString());
                        ViewContext.Writer.WriteLine(@Html.BotonImagen("edit", ig.Controller, new { id = id }, "boton-editar-mf", "Editar").ToHtmlString());
                        ViewContext.Writer.WriteLine(@Html.BotonImagen("delete", ig.Controller, new { id = id }, "boton-eliminar-mf", "Eliminar").ToHtmlString());
                    } else {
                        foreach (BotonGrilla b in ig.Botones) {
                            ViewContext.Writer.WriteLine(@Html.BotonImagen(b.Accion, b.Controlador, new { id = id }, b.Clase, b.Tooltip).ToHtmlString());
                        }
                    }

                });
            });
        }

        if (ig.AccionesAlComienzo) {
            foreach (var c in listGridViewsColumn) {
                settings.Columns.Add(c);
            }
        }


        //Se trunca contenido de columnas con mucho texto
        if (ig.VisibleColumns == null) { //Si no vinieron especificadas las columnas con un ancho, mirar aca.
            settings.HtmlDataCellPrepared = (sender, e) => {
                if (ig.TrunkColumns != null && ig.TrunkColumns.Keys.Contains(e.DataColumn.FieldName)) {
                    if (e.CellValue != null && e.CellValue.ToString().Length > ig.TrunkColumns[e.DataColumn.FieldName]) {
                        e.Cell.ToolTip = e.CellValue.ToString();
                        e.Cell.Text = e.CellValue.ToString().Substring(0, ig.TrunkColumns[e.DataColumn.FieldName]) + "...";
                    }
                }
            };
        }
    }
).Bind(Model).GetHtml())

