@model Object
@using System.Web.UI.WebControls
@using AutomotoraWeb.Helpers;
@using AutomotoraWeb.Models;
@using AutomotoraWeb.Controllers.General;

@{

    InfoGrilla ig = new InfoGrilla();
    int sumaAnchos = 0;

    if (ViewBag.InfoGrilla != null) {
        ig = ViewBag.InfoGrilla;
    } else {
        throw new Exception("No se ha especificado el objeto InfoGrilla para la grilla solicitada");
    }

    if (ig.DobleClick) {
        if (string.IsNullOrWhiteSpace(ig.ControladorDobleClick)) {
            ig.ControladorDobleClick = ig.Controller;
        }
        if (string.IsNullOrWhiteSpace(ig.AccionDobleClick)) {
            ig.AccionDobleClick = BaseController.DETAILS;
        }
    }

    List<GridViewColumn> listGridViewsColumn = new List<GridViewColumn>();
    System.Reflection.PropertyInfo[] propertiesinfo = ig.TypeOfModel.GetProperties();
    List<MVCxGridViewColumn> lista = new List<MVCxGridViewColumn>();

    foreach (System.Reflection.PropertyInfo propertyInfo in propertiesinfo) {
        object[] arrayDisplayAttribute = propertyInfo.GetCustomAttributes(typeof(System.ComponentModel.DataAnnotations.DisplayAttribute), true);
        foreach (System.ComponentModel.DataAnnotations.DisplayAttribute displayAttribute in arrayDisplayAttribute) {

            if ((ig.VisibleColumns != null && ig.VisibleColumns.Contains(propertyInfo.Name)) ||
                  (ig.VisibleColumns == null)  //si vinieron especificadas las columnas, solo se incluyen si estan en la lista  no son hidden
               ) {                          //si no vienieron, las pongo todas salvo las que estan como hidden

                if (ig.HiddenColumns == null || !ig.HiddenColumns.Contains(propertyInfo.Name)) {
                    MVCxGridViewColumn gridViewColumn = new MVCxGridViewColumn();
                    gridViewColumn.FieldName = propertyInfo.Name;
                    gridViewColumn.Caption = displayAttribute.Name;
                    gridViewColumn.ColumnType = MVCxGridViewColumnType.Default;

                    if (ig.AnchosColumns != null) {
                        if (ig.AnchosColumns.Keys.Contains(propertyInfo.Name)) {
                            gridViewColumn.Width = Unit.Pixel(ig.AnchosColumns[propertyInfo.Name]);
                            sumaAnchos += ig.AnchosColumns[propertyInfo.Name];
                        } else {
                            gridViewColumn.Width = Unit.Pixel(100);
                            sumaAnchos += 100;
                        }
                    } else {
                        if (propertyInfo.PropertyType.Name.Equals("Boolean")) {
                            gridViewColumn.Width = Unit.Pixel(75);
                        } else if (propertyInfo.PropertyType.Name.Equals("DateTime")) {
                            gridViewColumn.Width = Unit.Pixel(100);
                        }
                    }
                    if (propertyInfo.PropertyType.Name.Equals("Boolean")) {
                        gridViewColumn.ColumnType = MVCxGridViewColumnType.CheckBox;
                    }
                    if (propertyInfo.PropertyType.Name.Equals("DateTime")) {
                        gridViewColumn.PropertiesEdit.DisplayFormatString = "dd/MM/yyyy";
                    }
                    //listGridViewsColumn.Add(gridViewColumn);
                    lista.Add(gridViewColumn);  //lo guardo en una lista temporal para ordenarlo antes de agregarlo
                }
            }
        }
    }

    //Si vinieron especificadas las columnas, las ordeno segun el orden recibido.
    if (ig.VisibleColumns != null) {
        List<MVCxGridViewColumn> lista_ordenada = new List<MVCxGridViewColumn>();
        foreach (string s in ig.VisibleColumns) {
            foreach (var x in lista) {
                if (x.FieldName == s) {
                    lista_ordenada.Add(x);
                    break;
                }
            }
        }
        foreach (var x in lista_ordenada) {
            listGridViewsColumn.Add(x);
        }
    } else {
        foreach (var x in lista) {
            listGridViewsColumn.Add(x);
        }
    }
              
}


@(Html.DevExpress().GridView(
    settings => {
        settings.Name = ig.NameGrid;
        settings.CallbackRouteValues = new { Controller = ig.Controller, Action = ig.ActionCallbackRoute, idParametros = ViewData["idParametros"] };
        if (ig.AnchosColumns == null) {
            settings.Width = Unit.Percentage(98);
        } else {
            settings.Width = Unit.Pixel(sumaAnchos + 90);
        }
        settings.SettingsBehavior.AllowSort = true;
        settings.SettingsBehavior.AllowGroup = true;
        settings.Settings.ShowGroupPanel = true;
        settings.KeyFieldName = ig.KeyFieldName;

        //Adds

        settings.SettingsPager.AlwaysShowPager = true;
        settings.SettingsPager.Mode = GridViewPagerMode.ShowPager;
        settings.SettingsPager.FirstPageButton.Visible = true;
        settings.SettingsPager.LastPageButton.Visible = true;
        if (ig.registrosPorPagina <= 0) {
            settings.SettingsPager.PageSize = 30;
        } else {
            settings.SettingsPager.PageSize = ig.registrosPorPagina;
        }
        settings.SettingsPager.PageSizeItemSettings.Visible = true;
        //settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "30", "50", "100" };

        //Adds       

        //Filtros
        settings.Settings.ShowHeaderFilterButton = true;
        settings.Settings.ShowFilterRow = true;

        settings.Settings.ShowFilterBar = GridViewStatusBarMode.Visible;
        settings.SettingsText.FilterBarClear = "QuitarFiltros";
        settings.Settings.ShowFilterRowMenu = true;
        settings.CommandColumn.ClearFilterButton.Visible = true;
        settings.Settings.ShowHeaderFilterBlankItems = false;

        settings.SettingsPopup.HeaderFilter.MinWidth = 300;
        settings.SettingsPopup.HeaderFilter.MinHeight = 200;

        if (ig.DobleClick) {
            settings.ClientSideEvents.RowDblClick = "function(s, e){ window.open('" + @Url.Action(ig.AccionDobleClick, ig.ControladorDobleClick) + "/' + s.GetRowKey(e.visibleIndex), '_self'); }";
        }

        if (!ig.AccionesAlComienzo) {
            //Columnas Visibles (Propiedades)
            settings.Columns.AddRange(listGridViewsColumn.ToArray());
        }

        //Columnas Visibles (Editores)
        if (ig.Botones == null || ig.Botones.Count > 0) {
            settings.Columns.Add(column => {
                column.Caption = "Acciones";
                column.CellStyle.HorizontalAlign = HorizontalAlign.Center;

                if (ig.Botones == null) {
                    column.Width = Unit.Pixel(90);
                } else {
                    column.Width = Unit.Pixel(30 + ig.Botones.Count);
                }

                column.SetDataItemTemplateContent(c => {
                    var id = DataBinder.Eval(c.DataItem, (String)(ig.KeyFieldName));
                    if (ig.Botones == null) {
                        ViewContext.Writer.WriteLine(@Html.BotonImagen("details", ig.Controller, new { id = id }, "boton-consultar-mf", "Consultar").ToHtmlString());
                        ViewContext.Writer.WriteLine(@Html.BotonImagen("edit", ig.Controller, new { id = id }, "boton-editar-mf", "Editar").ToHtmlString());
                        ViewContext.Writer.WriteLine(@Html.BotonImagen("delete", ig.Controller, new { id = id }, "boton-eliminar-mf", "Eliminar").ToHtmlString());
                    } else {
                        foreach (BotonGrilla b in ig.Botones) {
                            ViewContext.Writer.WriteLine(@Html.BotonImagen(b.Accion, b.Controlador, new { id = id }, b.Clase, b.Tooltip).ToHtmlString());
                        }
                    }

                });
            });
        }

        if (ig.AccionesAlComienzo) {
            //Columnas Visibles (Propiedades)
            settings.Columns.AddRange(listGridViewsColumn.ToArray());
        }
        //Se trunca contenido de columnas con mucho texto
        settings.HtmlDataCellPrepared = (sender, e) => {
            if (ig.TrunkColumns != null && ig.TrunkColumns.Keys.Contains(e.DataColumn.FieldName)) {
                if (e.CellValue != null && e.CellValue.ToString().Length > ig.TrunkColumns[e.DataColumn.FieldName]) {
                    e.Cell.ToolTip = e.CellValue.ToString();
                    e.Cell.Text = e.CellValue.ToString().Substring(0, ig.TrunkColumns[e.DataColumn.FieldName]) + "...";
                }
            }
        };
    }
).Bind(Model).GetHtml())

