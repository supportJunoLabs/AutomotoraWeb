@model Object
@using System.Web.UI.WebControls
@using AutomotoraWeb.Helpers;
@using AutomotoraWeb.Models;
@using AutomotoraWeb.Controllers.General;
@using AutomotoraWeb.Utils;
@using System.ComponentModel.DataAnnotations;
@using System.Reflection;
@using  DevExpress.Web.Data;
@using AutomotoraWeb.Helpers.Grilla;

@{

    InfoGrilla ig = new InfoGrilla();

    if (ViewBag.InfoGrilla != null) {
        ig = ViewBag.InfoGrilla;
    } else {
        throw new Exception("No se ha especificado el objeto InfoGrilla para la grilla solicitada");
    }

    ObjetoGrilla og = new ObjetoGrilla();
    og.inicializarObjetoGrilla(ig, ViewContext, @Html, @Url);
    
    int accionesEdicion=0;

    if (ig.TipoControl == InfoGrilla.TIPO_CONTROL.GRILLA) {

        var grillaSettings = Html.DevExpress().GridView(
            settings => {
                settings.Name = ig.NameGrid;

                if (!string.IsNullOrWhiteSpace(ig.OnBeginCallback)) {
                    settings.ClientSideEvents.BeginCallback = "function(s, e){ " + ig.OnBeginCallback + "(s, e); }";
                    settings.CallbackRouteValues = new { Controller = ig.Controller, Action = ig.ActionCallbackRoute };
                } else {
                    settings.CallbackRouteValues = new { Controller = ig.Controller, Action = ig.ActionCallbackRoute, idParametros = ViewData["idParametros"] };
                }
                if (!string.IsNullOrWhiteSpace(ig.OnEndCallback)) {
                    settings.ClientSideEvents.EndCallback = "function(s, e){ " + ig.OnEndCallback + "(s, e); }";
                }

                if (ig.Edicion){
                    if (ig.CustomActionRouteValues != null) {
                        settings.CustomActionRouteValues = new { Controller = ig.Controller, Action = ig.CustomActionRouteValues };
                    }

                    if (ig.AddNewRowRouteValues != null) {
                        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = ig.Controller, Action = ig.AddNewRowRouteValues };
                        settings.CommandColumn.ShowNewButton = true;
                        accionesEdicion++;
                    }
                    if (ig.UpdateRowRouteValues != null) {
                        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = ig.Controller, Action = ig.UpdateRowRouteValues };

                        settings.CommandColumn.ShowEditButton = true;
                        accionesEdicion++;
                    }
                    if (ig.DeleteRowRouteValues != null) {
                        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = ig.Controller, Action = ig.DeleteRowRouteValues };
                        settings.CommandColumn.ShowDeleteButton = true;
                        accionesEdicion++;
                    }

                    switch (ig.TipoEdicion) { 
                        case InfoGrilla.TIPO_EDICION.INLINE:
                            settings.SettingsEditing.Mode = GridViewEditingMode.Inline;
                            break;
                        case InfoGrilla.TIPO_EDICION.FORM:
                            settings.SettingsEditing.Mode = GridViewEditingMode.EditForm;
                            break;
                        case InfoGrilla.TIPO_EDICION.ROWFORM:
                            settings.SettingsEditing.Mode = GridViewEditingMode.EditFormAndDisplayRow;
                            break;
                        case InfoGrilla.TIPO_EDICION.POPUP:
                            settings.SettingsEditing.Mode = GridViewEditingMode.PopupEditForm;
                            break;
                         default:
                            settings.SettingsEditing.Mode = GridViewEditingMode.PopupEditForm;
                            break;
                    }
                    
                    settings.SettingsPopup.EditForm.Width = 600;
                    settings.SettingsBehavior.ConfirmDelete = true;
                    //settings.Width = Unit.Percentage(100); // el ancho se maneja mas abajo con mas opciones
                    settings.CommandColumn.Visible = true;
                    
                    //settings.PreRender = (sender, e) => {
                    //    ((MVCxGridView)sender).StartEdit(1);
                    //};
                    settings.CellEditorInitialize = (s, e) => {
                        ASPxEdit editor = (ASPxEdit)e.Editor;
                        editor.ValidationSettings.Display = Display.Dynamic;
                    };
                }
                
                settings.SettingsBehavior.AllowSort = !ig.Estatica;
                settings.SettingsBehavior.AllowGroup = !ig.Estatica;
                settings.Settings.ShowGroupPanel = !ig.Estatica;
                settings.SettingsBehavior.AllowDragDrop = !ig.Estatica;
                
                settings.KeyFieldName = ig.KeyFieldName;

                settings.SettingsPager.Visible = ig.Paginado;
                if (ig.Paginado) {
                    settings.SettingsPager.Mode = GridViewPagerMode.ShowPager;
                    settings.SettingsPager.AlwaysShowPager = false;
                    if (ig.registrosPorPagina <= 0) {
                        settings.SettingsPager.PageSize = 30;
                    } else {
                        settings.SettingsPager.PageSize = ig.registrosPorPagina;
                    }
                    settings.SettingsPager.PageSizeItemSettings.Visible = ig.RegistrosPorPaginaVisible;
                    settings.SettingsPager.FirstPageButton.Visible = true;
                    settings.SettingsPager.LastPageButton.Visible = true;
                } else {
                    settings.SettingsPager.Mode = GridViewPagerMode.ShowAllRecords;
                }
                

                //Filtros
                settings.Settings.ShowHeaderFilterButton = !ig.Estatica;
                settings.Settings.ShowFilterRow = !ig.Estatica;

                if (!ig.Estatica) {
                    settings.Settings.ShowFilterBar = GridViewStatusBarMode.Visible;
                } else {
                    settings.Settings.ShowFilterBar = GridViewStatusBarMode.Hidden;
                }
                settings.SettingsText.FilterBarClear = "QuitarFiltros";
                settings.Settings.ShowFilterRowMenu = !ig.Estatica;
                settings.CommandColumn.ShowClearFilterButton = !ig.Estatica;
                settings.Settings.ShowHeaderFilterBlankItems = true;

                settings.SettingsPopup.HeaderFilter.MinWidth = 300;
                settings.SettingsPopup.HeaderFilter.MinHeight = 200;

                //EndlessMode
                if (ig.EndlessMode) {
                    settings.Settings.VerticalScrollBarMode = ScrollBarMode.Visible;
                    settings.Settings.VerticalScrollableHeight = 400;
                    settings.SettingsPager.Mode = GridViewPagerMode.EndlessPaging;
                }

                //checkboxes de seleccion de filas
                if (ig.ChecksSeleccion) {
                    settings.CommandColumn.Visible = true;
                    settings.CommandColumn.ShowSelectCheckbox = true;
                    if (!string.IsNullOrWhiteSpace(ig.AccionSeleccion)) {
                        settings.ClientSideEvents.SelectionChanged = ig.AccionSeleccion;
                    }
                    settings.CommandColumn.Width = Unit.Pixel(30);
                }

                settings.Settings.ShowFooter = ig.MostrarTotales && ig.hayTotales();

                if (ig.DobleClick) {
                    settings.ClientSideEvents.RowDblClick = "function(s, e){ window.open('" + @Url.Action(ig.AccionDobleClick, ig.ControladorDobleClick) + "/' + s.GetRowKey(e.visibleIndex), '_self'); }";
                }

                if (ig.AccionesAlComienzo && og.listGridViewsBotones != null) {
                    settings.Columns.Add(og.listGridViewsBotones);
                }

                if (ig.AccionesAlComienzo && og.listGridViewsBotones2 != null) {
                    settings.Columns.Add(og.listGridViewsBotones2);
                }

                foreach (var c in og.listGridViewsColumn) {
                    c.Settings.HeaderFilterMode = HeaderFilterMode.CheckedList;
                    settings.Columns.Add(c);
                }

                if (!ig.AccionesAlComienzo && og.listGridViewsBotones2 != null) {
                    settings.Columns.Add(og.listGridViewsBotones2);
                }
                if (!ig.AccionesAlComienzo && og.listGridViewsBotones != null) {
                    settings.Columns.Add(og.listGridViewsBotones);
                }

                settings.SettingsBehavior.ColumnResizeMode = ColumnResizeMode.Control;
                if (ig.AnchoTotal > 0) {
                    settings.Settings.UseFixedTableLayout = true;
                    settings.Width = Unit.Pixel(ig.AnchoTotal);
                } else {
                    if (!ig.anchosDefinidos()) { //si no vienen definidos los anchos de ninguna columna, se acomoda al contenido y no permite cambiarlo (si se habilita anda mal)
                        //settings.Settings.UseFixedTableLayout = false;
                        //settings.Width = Unit.Percentage(100);
                        settings.SettingsBehavior.ColumnResizeMode = ColumnResizeMode.Disabled; 
                    } else {
                        //si vienen los anchos calculo el ancho en funcion de la suma de las columnas
                        settings.Settings.UseFixedTableLayout = true;

                        //igual requiere que le ponga un ancho, porque si no, lo extiende hasta el 100% cuando es mas chica que el espacio disponible
                        int sumaAnchos = 0;
                        foreach (MVCxGridViewColumn col in settings.Columns) {
                            sumaAnchos += (int)col.Width.Value;
                        }

                        int coef = 1;
                        if (ig.CustomActionRouteValues != null) {
                            coef = 15;
                        }
                        int asel = 0;
                        if (ig.ChecksSeleccion) {
                            asel = 20;
                        }
                        

                        settings.Width = Unit.Pixel(sumaAnchos + (coef * settings.Columns.Count) + accionesEdicion * 35 + asel);
                    }
                }
                //if (!ig.Estatica) {
                    
                //} else {
                //    settings.SettingsBehavior.ColumnResizeMode = ColumnResizeMode.Disabled;
                //}
                
                if (ig.FuncionHtmlRowPrepared != null) {
                    settings.HtmlRowPrepared = new ASPxGridViewTableRowEventHandler(ig.FuncionHtmlRowPrepared);
                }

                if (ig.FuncionInitNewRow != null) {
                    settings.InitNewRow = new ASPxDataInitNewRowEventHandler(ig.FuncionInitNewRow);
                }
                
                if (ig.OnInit !=null){
                    settings.ClientSideEvents.Init = ig.OnInit;
                }
                

                //totales suma
                foreach (string s in og.totalesSuma) {
                    settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, s);
                }

                if (ViewData["DeleteError"] != null) {
                    settings.Settings.ShowFooter = true;
                    settings.Styles.Footer.CssClass = "grillaErrorFooter";
                    settings.SetFooterRowTemplateContent(c => {
                        Html.ViewContext.Writer.Write(ViewData["DeleteError"]);
                    });
                }        
                
            });

        if (ViewData["EditError"] != null) {
            grillaSettings.SetEditErrorText((string)ViewData["EditError"]);
        }

        if (ig.UsarViewData) {
            @grillaSettings.Bind(ViewData[ig.ClaveViewData]).GetHtml()
        } else {
            @grillaSettings.Bind(Model).GetHtml()
        }
    }



    if (ig.TipoControl == InfoGrilla.TIPO_CONTROL.GRIDLOOKUP) {

    @(Html.DevExpress().GridLookup(
            settings => {
                settings.Name = ig.NameGrid;


                if (ig.OnBeginCallback != null) {
                    settings.GridViewClientSideEvents.BeginCallback = "function(s, e){ " + ig.OnBeginCallback + "(s, e); }";
                    settings.GridViewProperties.CallbackRouteValues = new { Controller = ig.Controller, Action = ig.ActionCallbackRoute };
                } else {
                    settings.GridViewProperties.CallbackRouteValues = new { Controller = ig.Controller, Action = ig.ActionCallbackRoute, idParametros = ViewData["idParametros"] };
                }

                //Ancho de la grilla con la lista de opciones
                if (!ig.anchosDefinidos()) { //si no vienen definidos los anchos de ninguna columna, se autogenera segun el contenido
                    settings.GridViewProperties.Settings.UseFixedTableLayout = false;
                } else {
                    //si vienen los anchos calculo el ancho en funcion de las columnas
                    //en la lookup no se pone el ancho total como en la gridview, porque al ser flotanto no la extiende en el div contenedor
                    settings.GridViewProperties.Settings.UseFixedTableLayout = true;
                }
                //En la gridlookup no permito el resizing porque se dibuja mal la grilla y no respeta los valores.
                //settings.GridViewProperties.SettingsBehavior.ColumnResizeMode = ColumnResizeMode.Control;

                //Ancho del combo donde se muestran las opciones elegidas
                if (ig.AnchoSeleccion > 0) {
                    settings.Width = Unit.Pixel(ig.AnchoSeleccion);
                }
                
                settings.GridViewProperties.SettingsBehavior.AllowSort = true;
                settings.GridViewProperties.SettingsBehavior.AllowGroup = true;
                settings.GridViewProperties.Settings.ShowGroupPanel = true;
                settings.KeyFieldName = ig.KeyFieldName;

                settings.GridViewProperties.SettingsPager.AlwaysShowPager = true;
                settings.GridViewProperties.SettingsPager.Mode = GridViewPagerMode.ShowPager;
                settings.GridViewProperties.SettingsPager.FirstPageButton.Visible = true;
                settings.GridViewProperties.SettingsPager.LastPageButton.Visible = true;
                if (ig.registrosPorPagina <= 0) {
                    settings.GridViewProperties.SettingsPager.PageSize = 30;
                } else {
                    settings.GridViewProperties.SettingsPager.PageSize = ig.registrosPorPagina;
                }
                settings.GridViewProperties.SettingsPager.PageSizeItemSettings.Visible = ig.RegistrosPorPaginaVisible;

                //Filtros
                settings.GridViewProperties.Settings.ShowHeaderFilterButton = true;
                settings.GridViewProperties.Settings.ShowFilterRow = true;
                settings.GridViewProperties.Settings.ShowFilterBar = GridViewStatusBarMode.Hidden;
                settings.GridViewProperties.SettingsText.FilterBarClear = "QuitarFiltros";
                settings.GridViewProperties.Settings.ShowFilterRowMenu = true;
                settings.CommandColumn.ShowClearFilterButton = true;
                settings.GridViewProperties.Settings.ShowHeaderFilterBlankItems = false;

                settings.GridViewProperties.SettingsPopup.HeaderFilter.MinWidth = 300;
                settings.GridViewProperties.SettingsPopup.HeaderFilter.MinHeight = 200;

                settings.GridViewProperties.Settings.ShowFooter = true;

                settings.GridViewProperties.SettingsBehavior.AllowGroup = false;
                settings.GridViewProperties.Settings.ShowGroupPanel = false;

                //EndlessMode, NO es soportado en gridlookup
                //http://documentation.devexpress.com/#AspNet/CustomDocument15467
                //if (ig.EndlessMode) {
                //    settings.GridViewProperties.Settings.VerticalScrollBarMode = ScrollBarMode.Visible;
                //    settings.GridViewProperties.Settings.VerticalScrollableHeight = 400;
                //    settings.GridViewProperties.SettingsPager.Mode = GridViewPagerMode.EndlessPaging;
                //}


                if (!string.IsNullOrWhiteSpace(ig.FormatoSeleccionLookup)) {
                    settings.Properties.TextFormatString = ig.FormatoSeleccionLookup;
                }

                //FocusedRowChangedAccion falla cuando hay un filtro que da una sola fila, probamos con el evento rowclick
                //if (!string.IsNullOrWhiteSpace(ig.FocusedRowChangedAccion)) {
                //    string s = "function(s,e){" + ig.FocusedRowChangedAccion + "(s,e);}";
                //    settings.GridViewClientSideEvents.FocusedRowChanged = s;
                //}
                if (!string.IsNullOrWhiteSpace(ig.RowClickAccion)) {
                    string s = "function(s,e){" + ig.RowClickAccion + "(s,e);}";
                    settings.GridViewClientSideEvents.RowClick = s;
                }

                foreach (var c in og.listGridViewsColumn) {
                    c.Settings.HeaderFilterMode = HeaderFilterMode.CheckedList;
                    settings.Columns.Add(c);
                }

            }).BindList(((GridLookUpModel)Model).Opciones)
                .Bind(((GridLookUpModel)Model).GridLookUpCodigo)
                .GetHtml())  

    }
}
