@model Object
@using System.Web.UI.WebControls
@using AutomotoraWeb.Helpers;
@using AutomotoraWeb.Models;
@using AutomotoraWeb.Controllers.General;
@using AutomotoraWeb.Utils;
@using System.ComponentModel.DataAnnotations;
@using System.Reflection;




@{

    InfoGrilla ig = new InfoGrilla();
    int sumaAnchos = 0;

    if (ViewBag.InfoGrilla != null) {
        ig = ViewBag.InfoGrilla;
    } else {
        throw new Exception("No se ha especificado el objeto InfoGrilla para la grilla solicitada");
    }

    if (ig.TrunkColumns == null) {
        ig.TrunkColumns = new Dictionary<string, int>();
    }

    if (ig.DobleClick) {
        if (string.IsNullOrWhiteSpace(ig.ControladorDobleClick)) {
            ig.ControladorDobleClick = ig.Controller;
        }
        if (string.IsNullOrWhiteSpace(ig.AccionDobleClick)) {
            ig.AccionDobleClick = BaseController.DETAILS;
        }
    }
    bool defineAnchos = false;

    List<MVCxGridViewColumn> listGridViewsColumn = new List<MVCxGridViewColumn>();
    MVCxGridViewColumn listGridViewsBotones = null;
    MVCxGridViewColumn listGridViewsBotones2 = null;

    //------------- COLUMNAS POR REFLECTION ------------------------------------

    //Si no vienen definidas las columnas, las busco por reflection
    if (ig.VisibleColumns == null) {
        ig.VisibleColumns = new List<ColumnaGrilla>();

        //obtengo los campos por reflection
        PropertyInfo[] propertiesinfo = ig.TypeOfModel.GetProperties();
        foreach (PropertyInfo propertyInfo in propertiesinfo) {
            if (ig.HiddenColumns == null || !ig.HiddenColumns.Contains(propertyInfo.Name)) {

                ColumnaGrilla cg = new ColumnaGrilla();
                cg.Campo = propertyInfo.Name;
                if (ig.TrunkColumns != null && ig.TrunkColumns.Keys.Contains(cg.Campo)) {
                    cg.LargoMax = ig.TrunkColumns[cg.Campo];
                }
                ig.VisibleColumns.Add(cg);
            }
        }
    }

    //------------- COLUMNAS ESPECIFICADAS  ------------------------------------

    if (ig.VisibleColumns != null) { //Opcion en la que vienen definidas manualmente las columnas:
        defineAnchos = ig.anchosDefinidos();
        System.Reflection.PropertyInfo[] propertiesinfo = ig.TypeOfModel.GetProperties();
        foreach (ColumnaGrilla cg in ig.VisibleColumns) {

            //Ver que no haya venido como oculta
            if (ig.HiddenColumns != null && ig.HiddenColumns.Contains(cg.Campo)) {
                continue; //seguir con la proxima porque esta no va
            }

            //Buscar la propiedad asociada para obtener sus datos:
            DisplayAttribute displayAttribute = null;

            PropertyInfo propertyInfo = null;
            foreach (var x in propertiesinfo) {
                if (x.Name == cg.Campo) {
                    propertyInfo = x;
                    break; //salir del foreach
                }
            }

            if (propertyInfo != null) {
                //Acceder al data annotation de la columna
                object[] arrayDisplayAttribute = propertyInfo.GetCustomAttributes(typeof(DisplayAttribute), true);

                if (arrayDisplayAttribute != null && arrayDisplayAttribute.Length > 0) {
                    displayAttribute = (DisplayAttribute)arrayDisplayAttribute[0];
                }
            }

            MVCxGridViewColumn gridViewColumn = new MVCxGridViewColumn();
            gridViewColumn.FieldName = cg.Campo;

            //Titulo de la columna
            if (!string.IsNullOrWhiteSpace(cg.Titulo)) {
                gridViewColumn.Caption = cg.Titulo;
            } else {
                if (displayAttribute != null && !string.IsNullOrWhiteSpace(displayAttribute.Name)) {
                    gridViewColumn.Caption = displayAttribute.Name;
                } else {
                    gridViewColumn.Caption = cg.Campo;
                }
            }
            
            //Ancho
            if (defineAnchos) {
                if (cg.Ancho > 0) {
                    gridViewColumn.Width = Unit.Pixel(cg.Ancho);
                    sumaAnchos += cg.Ancho;
                } else {
                    gridViewColumn.Width = Unit.Pixel(100);
                    sumaAnchos += 100;
                }
            } else {
                if (GeneralUtils.isBoolean(propertyInfo, cg)) {
                    gridViewColumn.Width = Unit.Pixel(75);
                } else if (GeneralUtils.isDateTime(propertyInfo, cg)) {
                    gridViewColumn.Width = Unit.Pixel(100);
                }
            }

            //Alineacion
            if (cg.Alineacion != ColumnaGrilla.ALINEACIONES.DEFAULT) {
                switch (cg.Alineacion) {
                    case ColumnaGrilla.ALINEACIONES.IZQUIERDA:
                        gridViewColumn.CellStyle.HorizontalAlign = HorizontalAlign.Left;
                        break;
                    case ColumnaGrilla.ALINEACIONES.DERECHA:
                        gridViewColumn.CellStyle.HorizontalAlign = HorizontalAlign.Right;
                        break;
                    case ColumnaGrilla.ALINEACIONES.CENTRO:
                        gridViewColumn.CellStyle.HorizontalAlign = HorizontalAlign.Center;
                        break;
                    case ColumnaGrilla.ALINEACIONES.JUSTIFICADO:
                        gridViewColumn.CellStyle.HorizontalAlign = HorizontalAlign.Justify;
                        break;
                }
            } else { //Si no se especifica, usar la alineacion por defecto.
                if (GeneralUtils.isDateTime(propertyInfo, cg)) {
                    gridViewColumn.CellStyle.HorizontalAlign = HorizontalAlign.Center;
                }
                if (GeneralUtils.isImporte(propertyInfo, cg) || GeneralUtils.isInteger(propertyInfo, cg)) {
                    gridViewColumn.CellStyle.HorizontalAlign = HorizontalAlign.Right;
                }
            }

            //booleano              1
            if (GeneralUtils.isBoolean(propertyInfo, cg)) {
                gridViewColumn.ColumnType = MVCxGridViewColumnType.CheckBox;

            } else {
                gridViewColumn.ColumnType = MVCxGridViewColumnType.Default;
            }

            // si es fecha
            if (GeneralUtils.isDateTime(propertyInfo, cg)) {
                gridViewColumn.PropertiesEdit.DisplayFormatString = "dd/MM/yyyy";
            }

            if (!GeneralUtils.isBoolean(propertyInfo, cg)) {
                if (cg.Hipervinculo) {
                    gridViewColumn.SetDataItemTemplateContent(container => {
                        Html.DevExpress().HyperLink(hyperlink => {
                            //var visibleIndex = container.VisibleIndex;
                            //var keyValue = container.KeyValue;
                            var texto = DataBinder.Eval(container.DataItem, cg.Campo);
                            string tooltip = null;
                            if (GeneralUtils.isDateTime(propertyInfo, cg)) {
                                if (texto != null) {
                                    texto = ((DateTime)DataBinder.Eval(container.DataItem, cg.Campo)).ToString("dd/MM/yyyy");
                                }
                            } else {
                                if (texto != null && cg.LargoMax > 0 && texto.ToString().Length > cg.LargoMax) {
                                    tooltip = texto.ToString();
                                    texto = texto.ToString().Substring(0, cg.LargoMax) + "...";
                                }
                            }
                            var pardestino = DataBinder.Eval(container.DataItem, cg.HCampoParametro);

                            //hyperlink.Name = "hl" + keyValue.ToString();
                            if (texto != null) {
                                hyperlink.Properties.Text = texto.ToString();
                            }
                            hyperlink.NavigateUrl = Url.Action(cg.Haccion, cg.Hcontrolador, new { id = pardestino });
                            if (!string.IsNullOrWhiteSpace(tooltip)) {
                                hyperlink.ToolTip = tooltip;
                            }
                        }).Render();
                    });
                } else if (cg.LargoMax > 0) {
                    gridViewColumn.SetDataItemTemplateContent(container => {
                        Html.DevExpress().Label(label => {

                            string tooltip = null;
                            var texto = DataBinder.Eval(container.DataItem, cg.Campo);
                            if (GeneralUtils.isDateTime(propertyInfo, cg)) {
                                if (texto != null) {
                                    texto = ((DateTime)DataBinder.Eval(container.DataItem, cg.Campo)).ToString("dd/MM/yyyy");
                                }
                            } else {

                                if (texto != null && cg.LargoMax > 0 && texto.ToString().Length > cg.LargoMax) {
                                    tooltip = texto.ToString();
                                    texto = texto.ToString().Substring(0, cg.LargoMax) + "...";
                                }
                            }
                            if (texto != null) {
                                label.Text = texto.ToString();
                            }
                            if (!string.IsNullOrWhiteSpace(tooltip)) {
                                label.ToolTip = tooltip;
                            }
                        }).Render();
                    });
                }
            } //if not boolean
            listGridViewsColumn.Add(gridViewColumn);
        } //foreach
    }//if columnasvisibles

    //---------------------- COLUMNA BOTONES ------------------------------------------------

    if (ig.UsarBotones) {

        listGridViewsBotones = new MVCxGridViewColumn();

        listGridViewsBotones.Caption = "Acciones";
        listGridViewsBotones.CellStyle.HorizontalAlign = HorizontalAlign.Center;

        if (ig.Botones == null || ig.Botones.Count == 0) {//van los 3 por defecto porque dice UsarBotones (if anterior)
            listGridViewsBotones.Width = Unit.Pixel(90);
        } else {
            listGridViewsBotones.Width = Unit.Pixel(30 * ig.Botones.Count); //vienen botones, ver la cantidad
        }

        listGridViewsBotones.SetDataItemTemplateContent(c => {
            var id = DataBinder.Eval(c.DataItem, (String)(ig.KeyFieldName));
            if (ig.Botones == null || ig.Botones.Count == 0) {  //meter a prepo los botones por defecto, ajax o comunes
                if (ig.BotonesAjax) {
                    ViewContext.Writer.WriteLine(@Html.BotonAjax("details", "", id, "boton-consultar-mf", "Consultar").ToHtmlString());
                    ViewContext.Writer.WriteLine(@Html.BotonAjax("edit", "", id, "boton-editar-mf", "Editar").ToHtmlString());
                    ViewContext.Writer.WriteLine(@Html.BotonAjax("delete", "", id, "boton-eliminar-mf", "Eliminar").ToHtmlString());
                } else {
                    ViewContext.Writer.WriteLine(@Html.BotonImagen("details", ig.Controller, new { id = id }, "boton-consultar-mf", "Consultar").ToHtmlString());
                    ViewContext.Writer.WriteLine(@Html.BotonImagen("edit", ig.Controller, new { id = id }, "boton-editar-mf", "Editar").ToHtmlString());
                    ViewContext.Writer.WriteLine(@Html.BotonImagen("delete", ig.Controller, new { id = id }, "boton-eliminar-mf", "Eliminar").ToHtmlString());
                }
            } else {
                foreach (BotonGrilla b in ig.Botones) {
                    if (b is BotonAjaxGrilla) {
                        ViewContext.Writer.WriteLine(@Html.BotonAjaxImagen(b.Accion, b.Controlador, (int)id, b.Clase, b.Tooltip).ToHtmlString());
                    } else {
                        ViewContext.Writer.WriteLine(@Html.BotonImagen(b.Accion, b.Controlador, new { id = id }, b.Clase, b.Tooltip).ToHtmlString());
                    }

                }
            }
        });
    }
    if (ig.Botones2 != null && ig.Botones2.Count > 0) {
        //Hay grupo de botones secundario
        listGridViewsBotones2 = new MVCxGridViewColumn();
        if (string.IsNullOrWhiteSpace(ig.TextoAcciones2)) {
            listGridViewsBotones2.Caption = "Acciones";
        } else {
            listGridViewsBotones2.Caption = ig.TextoAcciones2;
        }
        int tot = 0;
        foreach (var b in ig.Botones2) {
            if (b.Ancho <= 0) {
                tot += 30;
            } else {
                tot += b.Ancho;
            }
        }
        listGridViewsBotones2.Width = Unit.Pixel(tot); //calcular tamanio total de los botones (30 si vino vacio el ancho)
        listGridViewsBotones2.SetDataItemTemplateContent(c => {
            var id = DataBinder.Eval(c.DataItem, (String)(ig.KeyFieldName));
            foreach (BotonGrilla b in ig.Botones2) {
                if (b.Tipo == BotonGrilla.TIPO.IMAGEN) {
                    ViewContext.Writer.WriteLine(@Html.BotonImagen(b.Accion, b.Controlador, id, b.Clase, b.Tooltip).ToHtmlString());
                } else {
                    ViewContext.Writer.WriteLine(@Html.BotonTexto(b.Accion, b.Controlador, new { id = id }, b.Clase, b.Tooltip, b.Texto).ToHtmlString());
                }

            }
        });
    }
}


@{
    //--------------------------------------GENERAR LA GRILLA ---------------------------------------------    
}

@(Html.DevExpress().GridView(
    settings => {
        settings.Name = ig.NameGrid;
        settings.CallbackRouteValues = new { Controller = ig.Controller, Action = ig.ActionCallbackRoute, idParametros = ViewData["idParametros"] };
        if (!defineAnchos) {
            settings.Width = Unit.Percentage(98);
        } else {
            settings.Width = Unit.Pixel(sumaAnchos + 90);
        }
        settings.SettingsBehavior.AllowSort = true;
        settings.SettingsBehavior.AllowGroup = true;
        settings.Settings.ShowGroupPanel = true;
        settings.KeyFieldName = ig.KeyFieldName;

        //Adds

        settings.SettingsPager.AlwaysShowPager = true;
        settings.SettingsPager.Mode = GridViewPagerMode.ShowPager;
        settings.SettingsPager.FirstPageButton.Visible = true;
        settings.SettingsPager.LastPageButton.Visible = true;
        if (ig.registrosPorPagina <= 0) {
            settings.SettingsPager.PageSize = 30;
        } else {
            settings.SettingsPager.PageSize = ig.registrosPorPagina;
        }
        settings.SettingsPager.PageSizeItemSettings.Visible = ig.RegistrosPorPaginaVisible;

        //settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "30", "50", "100" };

        //Adds       

        //Filtros
        settings.Settings.ShowHeaderFilterButton = true;
        settings.Settings.ShowFilterRow = true;

        settings.Settings.ShowFilterBar = GridViewStatusBarMode.Visible;
        settings.SettingsText.FilterBarClear = "QuitarFiltros";
        settings.Settings.ShowFilterRowMenu = true;
        settings.CommandColumn.ShowClearFilterButton = true;
        settings.Settings.ShowHeaderFilterBlankItems = false;

        settings.SettingsPopup.HeaderFilter.MinWidth = 300;
        settings.SettingsPopup.HeaderFilter.MinHeight = 200;

        settings.Settings.ShowFooter = true;

        if (ig.DobleClick) {
            settings.ClientSideEvents.RowDblClick = "function(s, e){ window.open('" + @Url.Action(ig.AccionDobleClick, ig.ControladorDobleClick) + "/' + s.GetRowKey(e.visibleIndex), '_self'); }";
        }

        if (ig.AccionesAlComienzo && listGridViewsBotones != null) {
            settings.Columns.Add(listGridViewsBotones);
        }

        if (ig.AccionesAlComienzo && listGridViewsBotones2 != null) {
            settings.Columns.Add(listGridViewsBotones2);
        }

        foreach (var c in listGridViewsColumn) {
            c.Settings.HeaderFilterMode = HeaderFilterMode.CheckedList;
            settings.Columns.Add(c);
        }

        if (!ig.AccionesAlComienzo && listGridViewsBotones2 != null) {
            settings.Columns.Add(listGridViewsBotones2);
        }
        if (!ig.AccionesAlComienzo && listGridViewsBotones != null) {
            settings.Columns.Add(listGridViewsBotones);
        }

    }
).Bind(Model).GetHtml())



@*
    //Queda como muestra de vento cellprepared:
    //    settings.HtmlDataCellPrepared = (sender, e) => {
    //        if (ig.TrunkColumns != null && ig.TrunkColumns.Keys.Contains(e.DataColumn.FieldName)) {
    //            if (e.CellValue != null && e.CellValue.ToString().Length > ig.TrunkColumns[e.DataColumn.FieldName]) {
    //                e.Cell.ToolTip = e.CellValue.ToString();
    //                e.Cell.Text = e.CellValue.ToString().Substring(0, ig.TrunkColumns[e.DataColumn.FieldName]) + "...";
    //            }
    //        }
    //    };
*@
